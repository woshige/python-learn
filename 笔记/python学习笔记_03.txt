1、Python的输入和输出
     Python输出文件方式：
                     表达式语句
                     print()函数
                     使用文件对象的write()函数
             将输出的值转换为字符串：str() repr()函数
                          str()：返回用户易读的方式
                          repr()：返回解释器易读的方式
                          
            #!/usr/bin/python
			# coding=utf-8
			import math

			# rjust()函数返回一个原字符串右对齐，并使用空格符填充至width新字符串，如果指定的长度小于
			# 字符串的长度，则返回原字符串 print()函数的end属性为每行的结束符号
			for x in range(1, 11):
			    print(repr(x).rjust(2), repr(x * x).rjust(3), end=' ')
			    print(repr(x * x * x).rjust(4))
			# 另一种输出平方立方表的方式  0 1 2 分别代表的是位置参数  2 2 4表示的是显示10进制的宽度
			for x in range(1, 11):
			    print('{0:2d} {1:2d} {2:4d}'.format(x, x * x, x * x * x))
			# 在数字的左边填充数字
			print("12".zfill(5))
			print("-3.14".zfill(7))
			print("{}网址为：{}".format('百度', 'www.baidu.com'))
			print("{name}网址为：{site}".format(name='百度', site='www.baidu.com'))
			print("{1},{0},{site}".format(10, 9, site='www.baidu.com'))
			# 0 表示的是第0个值，10表示的是整数部分的宽度，3表示的是小数的精度
			print('常量 PI的近似值为：{0:10.3f}'.format(math.pi))
			table = {'Google': 1, 'Runoob': 2, 'Taobao': 3}
			for name,number in table.items():
			    print('{0:10} ===> {1:10d}'.format(name,number))
    读取键盘输入：
        input_str = input("请输入：")
        print("您输入的内容是：",input_str)
    读取和写文件：
       open(filename,mode) 返回一个file对象
       filename：表示要访问的文件名称的字符串值
       mode：打开文件的方式 只读，写入，追加
           r  只读方式，文件指针放在开头，默认的方式
           rb 只读的二进制方式，文件指针放在文件的开头
           r+ 打开一个文件用于读写，文件指针放在开头
           rb+ 以二进制方式打开读写，文件指针放在文件的开头
           w   打开一个文件用于写入，如果文件存在则打开文件，并从头开始编辑，有内容就会被删除，如果不存在就会创建文件
           wb 二进制方式写入打开的文件，如果文件存在则打开文件并重头开始编辑，原内容会被删除
           w+ 打开一个文件用于读写，原有的内容会被覆盖，如果文件不存在的时候，会创建一个新的文件
           wb+ 以二进制格式打开文件进行读写，并从头开始编辑，如果文件不存在会创建新的文件
           a 打开一个文件进行追加，如果文件存在，文件指针会放在文件的尾部，如果文件不存在，会创建一个新的文件
           ab 以二进制方式打开一个文件进行追加，如果文件存在，指针放在文件的尾部，如果文件不存在会创建一个新的文件
           a+  打开一个文件用于读写，如果文件存在，指针在文件尾部，如果不存在就会进行床架
           ab+ 按照二进制格式用于追加读写，如果文件存在，文件指针放在文件的末尾，如果不存在会进行创建
         测试代码：
            #!/usr/bin/python
            # -*-coding:utf-8-*-
            # 读和写文件
			f = open("file", 'a')
			f.write("hello 我喜欢Python\n")
			f.close()
			f = open("file", 'r')
			# 从文件中读取单独的一行
			print("从file中进行读取", f.readline())
			print("---------")
			print("从file中进行读取", f.readline())
			f.close()
			f = open("file", 'r')
			content = f.readline()
			f.close()
			f1 = open("file2", 'a')
			# 返回的是写入文件的字符数
			num = f1.write(content)
			print("所在的行数为：",num)
			f.close()
			# 将所有的行进行读取
			f = open("file")
			# 进行遍历，readlines()返回的是一个列表的内容
			context = f.readlines()
			# 返回的文件对象所处的位置，它是从文件开头开始算起的字节数
			pos = f.tell()
			print("文件对象所在的位置为：",pos)
			print(context)
			for c in context:
			    print(c)
			f.close()
			# 也可以对一个文件对象迭代
			print("利用对文件对象进行迭代")
			f = open("file")
			for i in f:
			    print(i)
			f.close()
		  seek()方法
		        #!/usr/bin/python
				# coding=utf-8

				# 改变文件的当前的位置  seek(x,0) 从起始位置开始移动x个字符   seek(x,1)表示当前位置往后移动x个字符
				# seek(-x,2) 从尾部位置向前移动x个字符  打开方式中没有b的时候，只会相对于起始位置定位
				f = open("tmp/file", 'wb+')
				# b bytes  u/U unicode r/R 非转义字符串
				f.write(b'0123456789abcdef')
				# 从文件的首部开始移动  可以理解为类似光标
				# 从光标最开始的位置向后移动5下
				f.seek(5, 0)
				# 移动光标一次
				print(f.read(1))
				# 移动光标一次
				print(f.read(1))
				# 从当前的光标开始移动2个
				f.seek(2, 1)
				print(f.read(1))
				f.seek(-3, 2)
				print(f.read(1))
				# 关闭文件连接，并释放系统资源，如果再次调用，会抛出异常
				f.close()

		  优雅打开文件的方式
		        # 优雅的处理打开文件对象
				with open('tmp/file') as f:
				    read_data = f.read()
				print(f.closed)
		  文件序列化和反序列化
		        #!/usr/bin/python
				# -*-coding:utf-8-*-
				import pickle
				import pprint

				data1 = {'a': [1, 2.0, 3, 4 + 6j],
				         'b': ('string', u'Unicode string'),
				         'c': None}
				selfref_list = [1, 2, 3]
				selfref_list.append(selfref_list)
				with open('data.pkl', 'wb') as output:
				    # 使用协议0
				    pickle.dump(data1, output)
				    # 使用协议1
				    pickle.dump(selfref_list, output, -1)
				print(output.closed)
				with open('data.pkl','rb') as file_input:
				    data1 = pickle.load(file_input)
				    pprint.pprint(data1)
				    data2 = pickle.load(file_input)
				    pprint.pprint(data2)
				print(file_input.closed)