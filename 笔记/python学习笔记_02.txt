1、Python数据结构之列表
    # 列表的访问
	myList = ['physics', 'chemistry', 1997, 2000]
	myList2 = [1, 2, 3, 4, 5, 6, 7]
	print("myList[0]:", myList[0])
	print("myList2[1:5]", myList2[1:5])
	# 更新列表
	myList.append("slc")
	print(myList)
	del myList[1]
	print("after del myList[0]")
	print(myList)
	print(max(myList2))
	# 查找对应元素的索引
	print("'slc' 的索引为", myList.index('slc'))
	# 指定的索引插入数值
	print(myList.insert(0, "first"))
	print(myList)
   Python列表脚本操作符
     len([1,2,3])        3  表示列表的长度
     [1,2,3] + [4,5,6]  [1,2,3,4,5,6] 表示两个列表的组合
     ['Hi!'] * 4 重复四次
     3 in [1,2,3] 判断元素是否是在列表中
     for x in [1,2,3]  迭代
     L = ['google','runoob','taobal']  L[-2]表示倒数第二
2、Python元组
3、Python字典
      修改字典：
          dict = {'name':'zara','age':7}
          dict['age'] = 8 #更新
          dict['school'] = 'runoob' #添加
          del dict['name']  #删除
      函数
       dict.clear() 删除字典的所有的元素
       dict.copy() 返回一个字典的浅复制
       dict.fromkeys(seq[,val]) 创建一个新字典，以序列seq中的元素作为键，val为字典所有键对应的初始值
            myDict = {}
			mySeq = ('google','runoob','taobal')
			myDict = myDict.fromkeys(mySeq)
			print(myDict)  # {'runoob': None, 'taobal': None, 'google': None}
			myDict = myDict.fromkeys(mySeq,10)
			print(myDict)  # {'taobal': 10, 'runoob': 10, 'google': 10}
	   dict.get(key,default=None) 返回字典中对应的键的值，如果没有的话，返回的值为default的值
	   dict.has_key(key)  判断字典中是不是含有这个key
       dict.keys() 返回列表的所有的键
       dict.setdefault(key,default=None) 如果键不存在的时候，会设置一个key，并将其值设置为default
       dict.update(dict2)  将字典dict2的值更新到dict中
       dict.vallues() 返回字典的所有的值
       pop(key[,default])  删除字典给定key所对应的值，返回值为删除的值，key必须给出，否则返回default的值
       popitem()  返回并删除字典最后一对字典值
4、深拷贝和浅拷贝和赋值
   
    # 字典的浅拷贝和深拷贝  拷贝：就是从另外的内存上开辟一个空间，复制一个数据结构
	a = {1: [1, 2, 3, 4], 2: 10}
	b = a
	c = a.copy()
	d = copy.deepcopy(a)
	a[1].append(5)
	a[2] = 5
	print(a)  # {1: [1, 2, 3, 4, 5], 2: 5}
	print(b)  # {1: [1, 2, 3, 4, 5], 2: 5} 因为a和b
	print(c)  # {1: [1, 2, 3, 4, 5], 2: 10}  一级的对象进行了复制，但是二级的对象使用的还是引用
	print(d)  # {1: [1, 2, 3, 4], 2: 10} 完完全全使用了深拷贝
5、日期和时间
      时间戳：
          import time
          ticks = time.time()
          print("当前的时间戳为：",ticks)
      时间元组：
          很多Python函数用一个元组装起来的9组数字处理时间
          0   4位数字    2008
          1   月         1到12
          2   日         1到31
          3   小时       0到23
          4   分钟       0到59
          5   秒         0到61（60或者61 为闰秒）
          6   一周的第几日 0到6（0是周一）
          7   一年的第几日  0到366
          8   夏令时      -1,0,1 
             local_time = time.localtime(time.time())
             print(local_time)
             time.struct_time(tm_year=2020, tm_mon=2, tm_mday=9, tm_hour=14, tm_min=52, tm_sec=24, tm_wday=6, tm_yday=40, tm_isdst=0)
      获取格式化时间
          #!/usr/bin/python
          # coding=utf-8
          import time
          localtime = time.asctime(time.localtime(time.time()))
      格式化日期：
           time.strftime(format[, t])
           print(time.strftime("%Y-%m-%d  %H-%M-%S"),time.localtime(time.time()))
      日期：
        # 获取日历：theyear为年份  w 为 日期之间的宽度间距 l为行之间的间距 c 为每个月份之间的间隔
		print(calendar.calendar(theyear=2020))
		# 设置每周的第一天为6
		calendar.setfirstweekday(6)
		# 获取每周的第一天
		print(calendar.firstweekday())
		# 判断是不是闰年
		print(calendar.isleap(2020))
		# 获取某个月的日历
		print(calendar.month(2020, 2))
6、Python函数
      语法：
          def function_name(parameters):
              "函数文档字符串"
              function_suite
              return [expression]
          eg：

            #!/usr/bin/python
			# coding=utf-8

			# 函数定义
			def print_input_str(input_str):
			    """ 打印传入的字符串到标准的显示设备上 """
			    print(str)
			    return


			# 函数调用
			print_input_str("我要调用用户自定义函数")
			print_input_str("再次调用")
      
       参数传递：
          在Python中类型属于对象，变量是没有类型的
          a=[1,2,3]
          a="Runoob"
          上面的代码中，[1,2,3]是列表类型，"Runoob"是字符串类型，而变量是没有类型的，仅仅是一个指针，a指针既可以指向列表类型指针也可以指向字符串类型指针
          可变类型：strings，tuples，numbers都是不可更改的类型，而list，dict等都是可以更改的类型
                  a=5,a=10 实际上是生成了一个新的int值对象10，再让a指向10
          不可变类型：la=[1,2,3,4] 然后赋值la[2]=5 实际上就是将la上的内部的一部分值改变了
          Python的参数传递：
                 不可变类型：如传入的是整数、字符串、元组，传入的函数对其传入的值进行了拷贝，修改完成之后影响的只是这个复制的值（传入的只是这个值）
                 可变类型：传递的是引用的类型，传入的是可变对象，修改后会对其产生影响

                 eg：

                    #!/usr/bin/python
					# coding=utf-8

					# 函数定义
					def print_input_str(input_str):
					    """ 打印传入的字符串到标准的显示设备上 """
					    input_str = "input_str已经被修改"
					    return


					def chang_field(filed):
					    filed.append([1, 2, 3, 4])
					    print("函数内的值为：", filed)
					    return


					# 函数调用
					print_input_str("我要调用用户自定义函数")
					print_input_str("再次调用")
					s = "slc"
					# 当传入的是不可变的对象的时候，在函数之内进行修改不影响的
					print_input_str(s)
					print(s)

					# 传入的值为可变的对象时
					myList = [1, 2, 3, 4]
					chang_field(myList)
					print("传入之后的myList的值为：", myList)
       参数：
           必备参数：必须按照正确的顺序传入函数，调用时的数量必须和声明的时候一样
                     def print_input_str(input_str):
					    """ 打印传入的字符串到标准的显示设备上 """
					    input_str = "input_str已经被修改"
					    return

					 如果调用此函数的时候，没有选择参数的话，会报错
           关键字参数：可以允许调用函数的时候，参数的顺序和定义的时候的参数的顺序不一致的情况
                     def my_function(parameter1, parameter2):
					    print("输入的两个参数分别为：", parameter1, parameter2)
					    return
					 my_function(parameter2='slc',parameter1='age')
           默认参数：如果调用参数的时候没有参数传入，则认为其为默认值
                     def my_function2(parameter1=10):
					    print("传入的参数值的值为：", parameter1)
					    return
                     my_function2()
           不定长参数：表示传入函数的参数可能比定义的时候的参数多
                     def my_function2(parameter1=10):
						    print("传入的参数值的值为：", parameter1)
						    return
				     my_function3()
	    匿名函数：  lambda表达式特点：1）只是一个表达式，函数体比def简单 2）主体是一个表达式，而不是一个代码块，仅仅在lambda表达式封装有限的
	               逻辑 3）lambda表达式拥有自己的命名空间，且不能够访问参数列表之外或者全局命名空间中的参数 4）虽然lambda表达式看起来只写一行
	               ，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。
	                res = lambda arg1, arg2: arg1 + arg2
                    print("两数相加的结果为：", res(10,20))
        return：return可以用来返回函数的值，如果return不带参数的话，返回的值默认为None
        变量的作用域：
             全局变量：
             局部变量：
        Python函数中的冒号和箭头：
             冒号：参数的类型建议符，告诉希望传入的实参类型，函数后面跟着的箭头是函数的返回值的类型建议符
                #!/usr/bin/python
				# -*-coding:utf-8-*-

				# 建议的参数的类型
				def my_function(num1: int, num2: int = 100) -> int:
				    return num1 + num2


				if __name__ == "__main__":
				    print(my_function.__annotations__)
				    print(my_function(10))

7、Python模块
      Python其实就是一个普通的Python文件，包含了对象的定义和Python语句，模块可以让你更好的有效组织Python代码
      模块的导入：  import module1[,module2[,module3[,.....[moduleNe]]]]
      简单的导入其他的模块：
                #!/usr/bin/python
				# coding=utf-8
				import sys

				print('命令行参数如下：')
				for i in sys.argv:
				    print(i)
				print('\n\nPython的路径为：',sys.path,'\n')
	  导入自己写的同目录下的源文件：
	            使用pycharm将所在的目录设置为source root，之后进行正常使用import语句即可
	            如果是是不同的目录下的时候，在被导入的文件的目录下创建一个__init__.py文件，使用 from 目录名 import即可
	            #!/usr/bin/python
				# coding=utf-8
				import sys
				import install_all
				from util import ngsoc_util

				print('命令行参数如下：')
				for i in sys.argv:
				    print(i)
				print('\n\nPython的路径为：',sys.path,'\n')
				install_all.install("/usr/bin")
				ngsoc_util.message("import")

	   import sound.effects.echo：如果是这样导入其他的模块的时候，使用的时候必须使用全名进行访问
	   from sound.effects import echo：这样访问的时候不用去直接的去利用冗长的名字去访问
	   from sound.effects.echo import echofilter  只导入一个变量后者是函数

                  
	 __name__属性：当一个模块被另一个程序执行的时候，其主程序将执行，如果我们想在引用模块的时候，模块中的某一个程序不执行可以用__name__属性
	              来使得该模块在自身进行运行的时候运行
	                #!/usr/bin/python
					# coding=utf-8
					# 用来限制调用者执行方法的限制
					def message(mes):
					    if __name__ == '__main__':
					        print("我在执行自己的函数，我的密码是XXX")
					        print('%s' % __name__)
					    else:
					        print("我在被别人调用")
					        print("%s" % __name__)
	dir() 函数
	          可以找到模块内定义的所有的名称，以字符串里列表形式返回